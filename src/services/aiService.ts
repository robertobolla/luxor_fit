/**
 * Servicio de IA para generar contenido personalizado
 * Integraci√≥n con ChatGPT (OpenAI API)
 */

interface UserProfile {
  name: string;
  age: number;
  fitness_level: string;
  goals: string[];
  activity_types: string[];
  available_days: number;
  session_duration: number;
  equipment: string[];
}

interface AIResponse {
  success: boolean;
  introduction?: string;
  error?: string;
}

// Configuraci√≥n de la API de OpenAI
const OPENAI_API_KEY = process.env.EXPO_PUBLIC_OPENAI_API_KEY || '';
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Genera una introducci√≥n personalizada del plan de entrenamiento
 */
export async function generatePlanIntroduction(userData: UserProfile): Promise<AIResponse> {
  try {
    // Si no hay API key, usar texto por defecto
    if (!OPENAI_API_KEY || OPENAI_API_KEY === '') {
      console.warn('‚ö†Ô∏è OpenAI API Key no configurada, usando texto por defecto');
      return {
        success: true,
        introduction: generateDefaultIntroduction(userData),
      };
    }

    console.log('ü§ñ Generando introducci√≥n con IA...');
    console.log('üìã Datos del usuario:', userData);

    // Construir el prompt para ChatGPT
    const prompt = buildPrompt(userData);
    console.log('üìù Prompt construido:', prompt.substring(0, 200) + '...');

    // Llamar a la API de OpenAI con timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos timeout

    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'Eres un entrenador personal experto y motivador. Tu trabajo es crear introducciones personalizadas y motivadoras para planes de entrenamiento. S√© espec√≠fico, positivo y realista. Usa un tono amigable y cercano en espa√±ol.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        max_tokens: 400,
        temperature: 0.7,
      }),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Error desconocido' }));
      console.error('‚ùå Error de OpenAI API:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });
      
      // Fallback a texto por defecto si hay error
      return {
        success: true,
        introduction: generateDefaultIntroduction(userData),
      };
    }

    const data = await response.json();
    const introduction = data.choices[0]?.message?.content?.trim();

    if (!introduction) {
      console.warn('‚ö†Ô∏è Respuesta vac√≠a de OpenAI, usando texto por defecto');
      return {
        success: true,
        introduction: generateDefaultIntroduction(userData),
      };
    }

    console.log('‚úÖ Introducci√≥n generada exitosamente');
    return {
      success: true,
      introduction,
    };
  } catch (error) {
    console.error('‚ùå Error al generar introducci√≥n con IA:', error);
    
    // Determinar el tipo de error
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        console.error('‚è∞ Timeout en la llamada a OpenAI');
      } else if (error.message.includes('Network request failed')) {
        console.error('üåê Error de red - verificar conexi√≥n a internet');
      } else {
        console.error('üîß Error t√©cnico:', error.message);
      }
    }
    
    // Fallback a texto por defecto en caso de error
    console.log('üîÑ Usando introducci√≥n por defecto');
    return {
      success: true,
      introduction: generateDefaultIntroduction(userData),
    };
  }
}

/**
 * Construye el prompt para ChatGPT
 */
function buildPrompt(userData: UserProfile): string {
  const fitnessLevelText = {
    beginner: 'principiante',
    intermediate: 'intermedio',
    advanced: 'avanzado',
  }[userData.fitness_level] || userData.fitness_level;

  const goalsText = userData.goals.map(goal => {
    const goalMap: { [key: string]: string } = {
      weight_loss: 'perder peso',
      muscle_gain: 'ganar m√∫sculo',
      strength: 'aumentar fuerza',
      endurance: 'mejorar resistencia',
      flexibility: 'mejorar flexibilidad',
      general_fitness: 'mantener forma general',
    };
    return goalMap[goal] || goal;
  }).join(', ');

  const activityTypesText = userData.activity_types.map(activity => {
    const activityMap: { [key: string]: string } = {
      cardio: 'cardio',
      strength: 'entrenamiento de fuerza',
      sports: 'deportes',
      yoga: 'yoga/pilates',
      hiit: 'HIIT',
      mixed: 'entrenamiento mixto',
    };
    return activityMap[activity] || activity;
  }).join(', ');

  const equipmentText = userData.equipment.map(eq => {
    const equipmentMap: { [key: string]: string } = {
      none: 'solo peso corporal',
      dumbbells: 'mancuernas',
      barbell: 'barra ol√≠mpica',
      resistance_bands: 'bandas de resistencia',
      pull_up_bar: 'barra de dominadas',
      bench: 'banco',
      gym_access: 'gimnasio completo',
    };
    return equipmentMap[eq] || eq;
  }).join(', ');

  return `
Crea una introducci√≥n personalizada y motivadora (m√°ximo 3 p√°rrafos) para un plan de entrenamiento con los siguientes datos:

- Nombre: ${userData.name}
- Edad: ${userData.age} a√±os
- Nivel de fitness: ${fitnessLevelText}
- Objetivos: ${goalsText}
- Tipos de actividad preferidos: ${activityTypesText}
- Disponibilidad: ${userData.available_days} d√≠as por semana, ${userData.session_duration} minutos por sesi√≥n
- Equipamiento disponible: ${equipmentText}

La introducci√≥n debe:
1. Ser motivadora y personalizada
2. Mencionar espec√≠ficamente sus objetivos y c√≥mo los lograremos
3. Explicar c√≥mo su disponibilidad y equipamiento se adaptar√°n al plan
4. Ser realista sobre los resultados esperados
5. Generar entusiasmo para comenzar

No uses encabezados ni formato especial, solo texto corrido en p√°rrafos.
`.trim();
}

/**
 * Genera una introducci√≥n por defecto cuando no hay API key o hay error
 */
function generateDefaultIntroduction(userData: UserProfile): string {
  const fitnessLevelText = {
    beginner: 'principiante',
    intermediate: 'intermedio',
    advanced: 'avanzado',
  }[userData.fitness_level] || userData.fitness_level;

  const primaryGoal = userData.goals[0] || 'general_fitness';
  const goalText = {
    weight_loss: 'perder peso',
    muscle_gain: 'ganar m√∫sculo',
    strength: 'aumentar tu fuerza',
    endurance: 'mejorar tu resistencia',
    flexibility: 'mejorar tu flexibilidad',
    general_fitness: 'mantener una buena forma f√≠sica',
  }[primaryGoal] || 'alcanzar tus objetivos';

  return `¬°Hola ${userData.name}! Estamos emocionados de comenzar este viaje contigo. Bas√°ndonos en tu perfil como ${fitnessLevelText} y tu objetivo principal de ${goalText}, hemos dise√±ado un plan que se adapta perfectamente a tus ${userData.available_days} d√≠as disponibles por semana y tus sesiones de ${userData.session_duration} minutos.

Tu plan combina ejercicios que se alinean con tus preferencias de entrenamiento y aprovecha al m√°ximo el equipamiento que tienes disponible. Cada rutina est√° dise√±ada para ser desafiante pero alcanzable, permiti√©ndote progresar de manera constante hacia tus metas.

Recuerda que la consistencia es clave. Con tu dedicaci√≥n y nuestro plan personalizado, ver√°s resultados reales. ¬°Estamos aqu√≠ para apoyarte en cada paso del camino!`;
}

/**
 * Genera una rutina de entrenamiento personalizada
 */
export async function generateWorkoutPlan(userData: UserProfile): Promise<any> {
  try {
    // Si no hay API key, usar plan por defecto
    if (!OPENAI_API_KEY || OPENAI_API_KEY === '') {
      console.warn('‚ö†Ô∏è OpenAI API Key no configurada, usando plan por defecto');
      return {
        success: true,
        plan: generateDefaultWorkoutPlan(userData),
      };
    }

    // Construir el prompt para generar el plan
    const prompt = buildWorkoutPrompt(userData);

    // Llamar a la API de OpenAI
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'Eres un entrenador personal certificado (NSCA-CPT, ACE) con maestr√≠a en Ciencias del Ejercicio y 10+ a√±os de experiencia. Especializaciones: periodizaci√≥n, biomec√°nica, fisiolog√≠a del ejercicio, nutrici√≥n deportiva. Creas planes basados en literatura cient√≠fica (Schoenfeld, Helms, Nuckols, Israetel). Tus planes son espec√≠ficos, progresivos, seguros y ALTAMENTE EFECTIVOS.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        max_tokens: 2000,
        temperature: 0.8,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error de OpenAI API:', errorData);
      
      // Fallback a plan por defecto
      return {
        success: true,
        plan: generateDefaultWorkoutPlan(userData),
      };
    }

    const data = await response.json();
    const planText = data.choices[0]?.message?.content?.trim();

    if (!planText) {
      return {
        success: false,
        error: 'No se pudo generar el plan',
      };
    }

    // Parseo robusto del plan
    try {
      const plan = parsePlanSafely(planText);
      if (plan) {
        return { success: true, plan };
      }
      console.warn('‚ö†Ô∏è Plan inv√°lido tras intentos de limpieza. Usando plan por defecto.');
      return { success: true, plan: generateDefaultWorkoutPlan(userData) };
    } catch (parseError) {
      console.error('Error al parsear plan:', parseError);
      return { success: true, plan: generateDefaultWorkoutPlan(userData) };
    }
  } catch (error) {
    console.error('Error al generar plan de entrenamiento:', error);
    
    // Fallback a plan por defecto
    return {
      success: true,
      plan: generateDefaultWorkoutPlan(userData),
    };
  }
}

/**
 * Intenta extraer y parsear JSON aunque venga con fences, texto extra o comas colgantes.
 */
function parsePlanSafely(raw: string): any | null {
  if (!raw) return null;

  const text = raw.trim();
  // 1) Extraer bloque dentro de ``` ``` si existe
  let candidate = extractCodeFenceJson(text);
  if (!candidate) candidate = text;

  // 2) Extraer primer objeto JSON balanceado { ... }
  const balanced = extractBalancedJsonObject(candidate);
  const jsonStr = cleanJsonString(balanced || candidate);

  try {
    return JSON.parse(jsonStr);
  } catch {
    // 3) Segundo intento: quitar comas colgantes y normalizar quotes
    const repaired = jsonStr
      .replace(/,\s*(\}|\])/g, '$1')
      .replace(/[\u201C\u201D]/g, '"')
      .replace(/[\u2018\u2019]/g, '"');
    try {
      return JSON.parse(repaired);
    } catch {
      return null;
    }
  }
}

function extractCodeFenceJson(text: string): string | null {
  const fenceMatch = text.match(/```(?:json)?\n([\s\S]*?)```/i);
  if (fenceMatch && fenceMatch[1]) return fenceMatch[1].trim();
  return null;
}

function extractBalancedJsonObject(text: string): string | null {
  const start = text.indexOf('{');
  if (start === -1) return null;
  let depth = 0;
  for (let i = start; i < text.length; i++) {
    const ch = text[i];
    if (ch === '{') depth++;
    else if (ch === '}') depth--;
    if (depth === 0) {
      return text.slice(start, i + 1);
    }
  }
  return null;
}

function cleanJsonString(s: string): string {
  return s
    .replace(/^\s*```json\s*/i, '')
    .replace(/^\s*```\s*/i, '')
    .replace(/```\s*$/i, '')
    .replace(/[\u00A0\u200B\u200C\u200D]/g, '') // espacios invisibles
    .trim();
}

/**
 * Construye el prompt para generar un plan de entrenamiento
 */
function buildWorkoutPrompt(userData: UserProfile): string {
  const fitnessLevelText = {
    beginner: 'principiante',
    intermediate: 'intermedio',
    advanced: 'avanzado',
  }[userData.fitness_level] || userData.fitness_level;

  const goalsText = userData.goals.map(goal => {
    const goalMap: { [key: string]: string } = {
      weight_loss: 'perder peso',
      muscle_gain: 'ganar m√∫sculo',
      strength: 'aumentar fuerza',
      endurance: 'mejorar resistencia',
      flexibility: 'mejorar flexibilidad',
      general_fitness: 'mantener forma general',
    };
    return goalMap[goal] || goal;
  }).join(', ');

  const activityTypesText = userData.activity_types.map(activity => {
    const activityMap: { [key: string]: string } = {
      cardio: 'cardio',
      strength: 'entrenamiento de fuerza',
      sports: 'deportes',
      yoga: 'yoga/pilates',
      hiit: 'HIIT',
      mixed: 'entrenamiento mixto',
    };
    return activityMap[activity] || activity;
  }).join(', ');

  const equipmentText = userData.equipment.map(eq => {
    const equipmentMap: { [key: string]: string } = {
      none: 'solo peso corporal',
      dumbbells: 'mancuernas',
      barbell: 'barra ol√≠mpica',
      resistance_bands: 'bandas de resistencia',
      pull_up_bar: 'barra de dominadas',
      bench: 'banco',
      gym_access: 'gimnasio completo',
    };
    return equipmentMap[eq] || eq;
  }).join(', ');

  const genderText = {
    male: 'Masculino',
    female: 'Femenino',
    other: 'Otro'
  }[userData.gender] || userData.gender;

  return `
Eres un entrenador personal certificado con 10+ a√±os de experiencia. Crea un plan de entrenamiento PROFESIONAL y DETALLADO basado en evidencia cient√≠fica.

PERFIL DEL USUARIO:
- G√©nero: ${genderText}
- Edad: ${userData.age} a√±os
- Nivel: ${fitnessLevelText}
- Objetivos principales: ${goalsText}
- Actividades preferidas: ${activityTypesText}
- Disponibilidad: ${userData.available_days} d√≠as/semana, ${userData.session_duration} min/sesi√≥n
- Equipamiento: ${equipmentText}

INSTRUCCIONES CR√çTICAS:

1. SELECCI√ìN DE EJERCICIOS:
   - Usa ejercicios COMPUESTOS como base (sentadilla, peso muerto, press, dominadas, remo)
   - Incluye ejercicios ACCESORIOS espec√≠ficos para los objetivos
   - Nombra ejercicios con PRECISI√ìN (ej: "Sentadilla con barra alta" no solo "Sentadillas")
   - Var√≠a el tipo de agarre, √°ngulos y variaciones
   - Para principiantes: prioriza movimientos b√°sicos y t√©cnica
   - Para avanzados: incluye variaciones complejas y t√©cnicas avanzadas
   
   ADAPTACI√ìN POR G√âNERO:
   - Masculino: Equilibrio entre tren superior e inferior, √©nfasis en fuerza general
   - Femenino: Mayor √©nfasis en tren inferior (piernas, gl√∫teos), core y estabilidad
     * Incluye m√°s variaciones de sentadillas, hip thrust, zancadas, peso muerto rumano
     * Mant√©n tren superior pero con enfoque funcional
     * Ejercicios espec√≠ficos para gl√∫teos: hip thrust, patada de gl√∫teo, puente de gl√∫teos
   - Otro: Plan balanceado adaptado a objetivos espec√≠ficos

2. VOLUMEN Y INTENSIDAD (basado en ciencia):
   Principiante:
   - 8-12 series por grupo muscular/semana
   - 3-4 ejercicios por sesi√≥n
   - Reps: 8-15 para hipertrofia, 12-20 para resistencia
   - Descansos: 60-90s
   
   Intermedio:
   - 12-18 series por grupo muscular/semana
   - 4-6 ejercicios por sesi√≥n
   - Reps: 6-12 para fuerza, 8-15 para hipertrofia
   - Descansos: 90-180s para compuestos, 60-90s para accesorios
   
   Avanzado:
   - 16-25 series por grupo muscular/semana
   - 5-8 ejercicios por sesi√≥n
   - Reps: 3-6 para fuerza m√°xima, 6-12 para hipertrofia, 12-20 para resistencia
   - Descansos: 2-5min para fuerza, 90-120s para hipertrofia

3. ESTRUCTURA SEMANAL:
   - Distribuye grupos musculares inteligentemente (evita solapamiento)
   - Incluye d√≠as de recuperaci√≥n activa si es necesario
   - Para perder peso: m√°s frecuencia cardio, d√©ficit cal√≥rico
   - Para ganar m√∫sculo: enfoque en progresi√≥n de peso, super√°vit cal√≥rico
   - Para fuerza: ejercicios compuestos pesados, bajas reps

4. PROGRESI√ìN:
   - Especifica EXACTAMENTE c√≥mo aumentar la carga semana a semana
   - Incluye deloads cada 4-6 semanas
   - Menciona se√±ales de sobreentrenamiento

5. PRINCIPIOS CLAVE:
   - Cita principios cient√≠ficos espec√≠ficos (sobrecarga progresiva, especificidad, etc.)
   - Explica el PORQU√â de cada decisi√≥n
   - Incluye referencias a estudios si es relevante

FORMATO JSON REQUERIDO:
{
  "name": "Nombre espec√≠fico y motivador",
  "description": "Descripci√≥n detallada del enfoque y beneficios esperados",
  "duration_weeks": n√∫mero (8-16 semanas),
  "days_per_week": ${userData.available_days},
  "weekly_structure": [
    {
      "day": "D√≠a 1",
      "focus": "Enfoque espec√≠fico (ej: Fuerza de tren superior - Empuje)",
      "duration": ${userData.session_duration},
      "exercises": [
        {
          "name": "Nombre ESPEC√çFICO del ejercicio",
          "sets": n√∫mero,
          "reps": "rango espec√≠fico",
          "rest": "tiempo espec√≠fico"
        }
      ]
    }
  ],
  "key_principles": [
    "Principio cient√≠fico 1 con explicaci√≥n breve",
    "Principio cient√≠fico 2 con explicaci√≥n breve",
    "Principio cient√≠fico 3 con explicaci√≥n breve"
  ],
  "progression": "Plan DETALLADO de progresi√≥n semanal con n√∫meros espec√≠ficos y se√±ales de cu√°ndo aumentar carga",
  "recommendations": [
    "Recomendaci√≥n espec√≠fica y accionable 1",
    "Recomendaci√≥n espec√≠fica y accionable 2",
    "Recomendaci√≥n espec√≠fica y accionable 3"
  ]
}

IMPORTANTE:
- Responde SOLO con el JSON v√°lido, sin markdown ni texto adicional
- Aseg√∫rate de que el plan sea REALISTA y ALCANZABLE
- Prioriza CALIDAD sobre cantidad
- El plan debe ser lo suficientemente desafiante pero no abrumador
- Adapta el lenguaje t√©cnico al nivel del usuario
`.trim();
}

/**
 * Genera un plan de entrenamiento por defecto
 */
function generateDefaultWorkoutPlan(userData: UserProfile): any {
  const fitnessLevelText = {
    beginner: 'Principiante',
    intermediate: 'Intermedio',
    advanced: 'Avanzado',
  }[userData.fitness_level] || 'Intermedio';

  const primaryGoal = userData.goals[0] || 'general_fitness';
  const daysPerWeek = Math.min(userData.available_days, 5);

  // Plan b√°sico adaptado al nivel
  const plans = {
    beginner: {
      name: `Plan ${fitnessLevelText} - Fundamentos`,
      description: `Plan de ${daysPerWeek} d√≠as para construir una base s√≥lida de fuerza y resistencia`,
      duration_weeks: 8,
      days_per_week: daysPerWeek,
      weekly_structure: [
        {
          day: 'D√≠a 1',
          focus: 'Cuerpo completo - Fuerza',
          duration: userData.session_duration,
          exercises: [
            { name: 'Sentadillas', sets: 3, reps: '10-12', rest: '60s' },
            { name: 'Flexiones', sets: 3, reps: '8-10', rest: '60s' },
            { name: 'Remo con banda', sets: 3, reps: '12-15', rest: '45s' },
            { name: 'Plancha', sets: 3, reps: '30-45s', rest: '45s' },
          ],
        },
        {
          day: 'D√≠a 2',
          focus: 'Cardio moderado',
          duration: userData.session_duration,
          exercises: [
            { name: 'Caminata r√°pida', sets: 1, reps: '20 min', rest: '-' },
            { name: 'Jumping jacks', sets: 3, reps: '30s', rest: '30s' },
            { name: 'Mountain climbers', sets: 3, reps: '20s', rest: '40s' },
          ],
        },
        {
          day: 'D√≠a 3',
          focus: 'Cuerpo completo - Resistencia',
          duration: userData.session_duration,
          exercises: [
            { name: 'Zancadas', sets: 3, reps: '10 por pierna', rest: '45s' },
            { name: 'Flexiones de rodillas', sets: 3, reps: '10-12', rest: '45s' },
            { name: 'Superman', sets: 3, reps: '12-15', rest: '30s' },
            { name: 'Bicicleta abdominal', sets: 3, reps: '15 por lado', rest: '30s' },
          ],
        },
      ],
      key_principles: [
        'Enfoque en la t√©cnica correcta antes que en la intensidad',
        'Progresi√≥n gradual en volumen e intensidad',
        'Descanso adecuado entre sesiones (48 horas para mismo grupo muscular)',
      ],
      progression: 'Aumenta repeticiones en 2-3 cada semana. Despu√©s de 4 semanas, incrementa la dificultad de los ejercicios.',
      recommendations: [
        'Calienta 5-10 minutos antes de cada sesi√≥n',
        'Mant√©n una buena hidrataci√≥n',
        'Escucha a tu cuerpo y descansa cuando sea necesario',
      ],
    },
    intermediate: {
      name: `Plan ${fitnessLevelText} - Desarrollo`,
      description: `Plan de ${daysPerWeek} d√≠as para aumentar fuerza y masa muscular`,
      duration_weeks: 12,
      days_per_week: daysPerWeek,
      weekly_structure: [
        {
          day: 'D√≠a 1',
          focus: 'Tren superior - Push',
          duration: userData.session_duration,
          exercises: [
            { name: 'Press de banca', sets: 4, reps: '8-10', rest: '90s' },
            { name: 'Press militar', sets: 3, reps: '8-12', rest: '90s' },
            { name: 'Fondos', sets: 3, reps: '10-12', rest: '60s' },
            { name: 'Extensiones de tr√≠ceps', sets: 3, reps: '12-15', rest: '60s' },
          ],
        },
        {
          day: 'D√≠a 2',
          focus: 'Tren inferior - Fuerza',
          duration: userData.session_duration,
          exercises: [
            { name: 'Sentadillas', sets: 4, reps: '6-8', rest: '2-3 min' },
            { name: 'Peso muerto rumano', sets: 3, reps: '8-10', rest: '2 min' },
            { name: 'Zancadas', sets: 3, reps: '10 por pierna', rest: '90s' },
            { name: 'Elevaciones de gemelos', sets: 4, reps: '15-20', rest: '45s' },
          ],
        },
        {
          day: 'D√≠a 3',
          focus: 'Tren superior - Pull',
          duration: userData.session_duration,
          exercises: [
            { name: 'Dominadas', sets: 4, reps: '6-10', rest: '2 min' },
            { name: 'Remo con barra', sets: 4, reps: '8-10', rest: '90s' },
            { name: 'Curl de b√≠ceps', sets: 3, reps: '10-12', rest: '60s' },
            { name: 'Face pulls', sets: 3, reps: '15-20', rest: '45s' },
          ],
        },
        {
          day: 'D√≠a 4',
          focus: 'HIIT / Cardio',
          duration: userData.session_duration,
          exercises: [
            { name: 'Burpees', sets: 4, reps: '30s', rest: '30s' },
            { name: 'Sprints', sets: 6, reps: '20s', rest: '40s' },
            { name: 'Box jumps', sets: 3, reps: '10', rest: '60s' },
            { name: 'Battle ropes', sets: 3, reps: '30s', rest: '30s' },
          ],
        },
      ],
      key_principles: [
        'Sobrecarga progresiva: aumenta peso o repeticiones gradualmente',
        'Volumen √≥ptimo: 10-20 series por grupo muscular por semana',
        'Frecuencia: entrena cada grupo muscular 2 veces por semana',
      ],
      progression: 'Incrementa peso en 2.5-5% cuando puedas completar todas las series con buena t√©cnica. Cada 4 semanas, toma una semana de descarga.',
      recommendations: [
        'Prioriza ejercicios compuestos',
        'Mant√©n un registro de tus levantamientos',
        'Asegura 7-9 horas de sue√±o para recuperaci√≥n',
      ],
    },
    advanced: {
      name: `Plan ${fitnessLevelText} - Optimizaci√≥n`,
      description: `Plan de ${daysPerWeek} d√≠as con periodizaci√≥n para m√°ximos resultados`,
      duration_weeks: 16,
      days_per_week: daysPerWeek,
      weekly_structure: [
        {
          day: 'D√≠a 1',
          focus: 'Fuerza - Tren inferior',
          duration: userData.session_duration,
          exercises: [
            { name: 'Sentadilla con barra', sets: 5, reps: '3-5', rest: '3-4 min' },
            { name: 'Peso muerto', sets: 4, reps: '4-6', rest: '3 min' },
            { name: 'Hip thrust', sets: 4, reps: '8-10', rest: '2 min' },
            { name: 'Sentadilla b√∫lgara', sets: 3, reps: '8 por pierna', rest: '90s' },
          ],
        },
        {
          day: 'D√≠a 2',
          focus: 'Hipertrofia - Tren superior Push',
          duration: userData.session_duration,
          exercises: [
            { name: 'Press inclinado', sets: 4, reps: '8-12', rest: '2 min' },
            { name: 'Press militar', sets: 4, reps: '8-10', rest: '2 min' },
            { name: 'Aperturas', sets: 3, reps: '12-15', rest: '90s' },
            { name: 'Tr√≠ceps en polea', sets: 4, reps: '12-15', rest: '60s' },
          ],
        },
        {
          day: 'D√≠a 3',
          focus: 'Potencia / Pliometr√≠a',
          duration: userData.session_duration,
          exercises: [
            { name: 'Power cleans', sets: 5, reps: '3-5', rest: '2-3 min' },
            { name: 'Box jumps', sets: 4, reps: '5-8', rest: '2 min' },
            { name: 'Med ball slams', sets: 4, reps: '8-10', rest: '90s' },
            { name: 'Sprint intervals', sets: 6, reps: '15s', rest: '45s' },
          ],
        },
        {
          day: 'D√≠a 4',
          focus: 'Hipertrofia - Tren superior Pull',
          duration: userData.session_duration,
          exercises: [
            { name: 'Dominadas lastradas', sets: 4, reps: '6-8', rest: '2-3 min' },
            { name: 'Remo pendlay', sets: 4, reps: '6-8', rest: '2 min' },
            { name: 'Pullover', sets: 3, reps: '10-12', rest: '90s' },
            { name: 'Curl martillo', sets: 3, reps: '10-12', rest: '60s' },
          ],
        },
        {
          day: 'D√≠a 5',
          focus: 'Accesorios / Core',
          duration: userData.session_duration,
          exercises: [
            { name: 'Plancha con peso', sets: 4, reps: '45-60s', rest: '90s' },
            { name: 'Pallof press', sets: 3, reps: '12 por lado', rest: '60s' },
            { name: 'Farmer walks', sets: 4, reps: '40m', rest: '90s' },
            { name: 'Ab wheel', sets: 3, reps: '10-15', rest: '60s' },
          ],
        },
      ],
      key_principles: [
        'Periodizaci√≥n ondulante: alterna entre fases de fuerza, hipertrofia y potencia',
        'Volumen alto: 15-25 series por grupo muscular por semana',
        'Intensidad variable: usa RPE y porcentajes de 1RM',
      ],
      progression: 'Sigue un ciclo de 4 semanas: acumulaci√≥n (volumen alto), intensificaci√≥n (peso alto), realizaci√≥n (pico), descarga. Ajusta basado en recuperaci√≥n.',
      recommendations: [
        'Monitorea m√©tricas de recuperaci√≥n (HRV, calidad de sue√±o)',
        'Considera periodizaci√≥n de nutrici√≥n (surplus/d√©ficit seg√∫n fase)',
        'Incluye trabajo de movilidad y prevenci√≥n de lesiones',
      ],
    },
  };

  return plans[userData.fitness_level as keyof typeof plans] || plans.intermediate;
}

/**
 * Genera consejos nutricionales personalizados (para futuro uso)
 */
export async function generateNutritionAdvice(userData: UserProfile): Promise<AIResponse> {
  // TODO: Implementar generaci√≥n de consejos nutricionales
  return {
    success: false,
    error: 'Funci√≥n no implementada a√∫n',
  };
}

